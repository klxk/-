# -*- coding: utf-8 -*-
"""
Created on Tue Sep 27 18:00:19 2016

@author: Administrator
"""

import csv
import random
import math
import operator

#数据处理的函数
#把加载进来的特征数据从字符串转换成整数,随机地切分
#训练数据集和测试数据集。训练数据集数据量/测试数据
#集数据量的比值取67/33是一个常用的惯例
def loadDataset(filename,split,trainingSet=[],testSet=[]):
    with open(filename,'rb') as csvfile:
        lines = csv.reader(csvfile)
        dataset=list(lines)
        for x in range(len(dataset)-1):#遍历所有行
            for y in range(4):#代表从0到4(不包含4)
                dataset[x][y]=float(dataset[x][y])
            if random.random()<split:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])

#数据处理函数的测试函数       
#trainingSet=[]
#testSet=[]
#loadDataset('iris.data',0.66,trainingSet,testSet)
#print 'Train:' + repr(len(trainingSet))
#print 'Test:' + repr(len(testSet))
                
#相似度计算的函数
#直接使用欧式距离来测量。
#欧式距离就是两列数中对应数做差的平方和，之后再开方
#通过length控制哪些维度参与计算，忽略后面的维度
def euclideanDistance(instance1,instance2,length):
    distance=0
    for x in range(length):
        distance += pow((instance1[x]-instance2[x]),2)
    return math.sqrt(distance)
    
#相似度计算的函数的测试函数
#data1=[2,2,2,'a']
#data2=[4,4,4,'b']
#distance = euclideanDistance(data1,data2,3)#只计算前3个变量
#print 'Distance:' + repr(distance)
    
#获取邻近元素的函数
def getNeighbors(trainingSet,testInstance,k):
    distances=[]
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance,trainingSet[x],length)
        distances.append((trainingSet[x],dist))
    distances.sort(key=operator.itemgetter(1))#获取对象的第二维的数据，即dist距离
    neighbors=[]
    for x in range(k):
        neighbors.append(distances[x][0])
        #distances为一个二维数组 训练集 和 距离dist
        #print distances[x][1] 为距离的值dist
    return neighbors
    
#获取邻近元素的函数的测试函数
#trainSet = [[2,2,2,'a'],[4,4,4,'b']]
#testInstance = [5,5,5]
#k=1
#neighbors = getNeighbors(trainSet,testInstance,1)
#print(neighbors)
    
#结果预测的函数
def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]#获得的是最后一位 即标签
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(),key=operator.itemgetter(1),
                         reverse=True)#根据第二维排序即标签所对应的数量，大的在前
    return sortedVotes[0][0] #返回所对应的标签

#结果预测的函数的测试函数
#neighbors = [[1,1,1,'a'],[2,2,2,'a'],[3,3,3,'b']]
#response = getResponse(neighbors)
#print(response)

#准确度评估函数
def getAccuracy(testSet,predictions):
    correct = 0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
            correct += 1
    return (correct/float(len(testSet)))*100.0

#准确度评估函数的测试函数  
#testSet =  [[1,1,1,'a'],[2,2,2,'a'],[3,3,3,'b']]
#predictions = ['a','a','b']
#accuracy = getAccuracy(testSet,predictions)
#print(accuracy)

def main():
    trainingSet=[]
    testSet=[]
    split = 0.67
    loadDataset('iris.data',split,trainingSet,testSet)
    print 'Train:' + repr(len(trainingSet))
    print 'Test:' + repr(len(testSet))
    predictions=[]
    k=3
    for x in range(len(testSet)):
        neighbors = getNeighbors(trainingSet,testSet[x],k)
        result = getResponse(neighbors)
        predictions.append(result)
        print('>predicted='+repr(result)+'.actual='+repr(testSet[x][-1]))
    accuracy = getAccuracy(testSet,predictions)
    print('accuracy:' + repr(accuracy)+'%')
    
main()
    

        
            
        
